"use strict";function _classCallCheck(n,i){if(!(n instanceof i))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function n(n,i){for(var e=0;e<i.length;e++){var t=i[e];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(n,t.key,t)}}return function(i,e,t){return e&&n(i.prototype,e),t&&n(i,t),i}}();!function(){var n=function(){function n(){var i=this;_classCallCheck(this,n),window.Engine.Config.is_dev()&&(this.fps_meter=new FPSMeter),this.renderer=PIXI.autoDetectRenderer(window.Engine.Window.width,window.Engine.Window.height,{}),document.body.appendChild(this.renderer.view),this.main_stage=new PIXI.Container,this.animate(),window.Engine.Window.on_resize(function(){i.renderer.resize(window.Engine.Window.width,window.Engine.Window.height)})}return _createClass(n,[{key:"animate",value:function(){var n=this;window.Engine.Config.is_dev()&&this.fps_meter.tick(),this.renderer.render(this.main_stage),window.requestAnimationFrame(function(){n.animate()})}}]),n}();void 0===window.Engine&&(window.Engine={}),window.Engine.Application=n}(),function(){var n=function(){function n(){_classCallCheck(this,n),this.env="dev"}return _createClass(n,[{key:"is_test",value:function(){return"test"==this.env?!0:void 0}},{key:"is_dev",value:function(){return"dev"==this.env?!0:void 0}},{key:"is_prod",value:function(){return"prod"==this.env?!0:void 0}}]),n}();void 0===window.Engine&&(window.Engine={}),window.Engine.Config=new n}(),function(){var n=function(){function n(){var i=this;_classCallCheck(this,n),this.keys=[],this.codes={LEFT:37,UP:38,RIGHT:39,DOWN:40,A:65,W:87,D:68,S:83},document.addEventListener("keydown",function(n){i.on_keydown(n.keyCode)}),document.addEventListener("keyup",function(n){i.on_keyup(n.keyCode)})}return _createClass(n,[{key:"on_keydown",value:function(n){this.is_down(n)||this.keys.push(n)}},{key:"on_keyup",value:function(n){this.is_down(n)&&this.keys.splice(this.keys.indexOf(n),1)}},{key:"is_down",value:function(n){return this.keys[n]&&(n=this.keys[n]),-1==this.keys.indexOf(n)?!1:!0}}]),n}();void 0===window.Engine&&(window.Engine={}),window.Engine.Key=new n}(),function(){var n=function(){function n(){_classCallCheck(this,n)}return _createClass(n,null,[{key:"to_iso",value:function(n){return{x:(n.x-n.y)/2,y:(n.x+n.y)/2}}}]),n}();void 0===window.Engine&&(window.Engine={}),window.Engine.Point=n}(),function(){var n=function(){function n(){var i=this;_classCallCheck(this,n),this.height=window.innerHeight,this.width=window.innerWidth,this.callback_function=function(){},this.timeout=void 0,window.onresize=function(){i.resize_callback()}}return _createClass(n,[{key:"resize_callback",value:function(){var n=this;void 0!=this.timeout&&(window.clearTimeout(this.timeout),this.timeout=void 0),this.timeout=window.setTimeout(function(){n.height=window.innerHeight,n.width=window.innerWidth,n.callback_function()},50)}},{key:"on_resize",value:function(n){this.callback_function=n}}]),n}();void 0===window.Engine&&(window.Engine={}),window.Engine.Window=new n}();
//# sourceMappingURL=data:application/json;base64,